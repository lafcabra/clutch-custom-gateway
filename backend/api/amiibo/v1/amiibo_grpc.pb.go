// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: amiibo/v1/amiibo.proto

package amiibov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AmiiboAPIClient is the client API for AmiiboAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmiiboAPIClient interface {
	GetAmiibo(ctx context.Context, in *GetAmiiboRequest, opts ...grpc.CallOption) (*GetAmiiboResponse, error)
}

type amiiboAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAmiiboAPIClient(cc grpc.ClientConnInterface) AmiiboAPIClient {
	return &amiiboAPIClient{cc}
}

func (c *amiiboAPIClient) GetAmiibo(ctx context.Context, in *GetAmiiboRequest, opts ...grpc.CallOption) (*GetAmiiboResponse, error) {
	out := new(GetAmiiboResponse)
	err := c.cc.Invoke(ctx, "/clutch.amiibo.v1.AmiiboAPI/GetAmiibo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmiiboAPIServer is the server API for AmiiboAPI service.
// All implementations should embed UnimplementedAmiiboAPIServer
// for forward compatibility
type AmiiboAPIServer interface {
	GetAmiibo(context.Context, *GetAmiiboRequest) (*GetAmiiboResponse, error)
}

// UnimplementedAmiiboAPIServer should be embedded to have forward compatible implementations.
type UnimplementedAmiiboAPIServer struct {
}

func (UnimplementedAmiiboAPIServer) GetAmiibo(context.Context, *GetAmiiboRequest) (*GetAmiiboResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmiibo not implemented")
}

// UnsafeAmiiboAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmiiboAPIServer will
// result in compilation errors.
type UnsafeAmiiboAPIServer interface {
	mustEmbedUnimplementedAmiiboAPIServer()
}

func RegisterAmiiboAPIServer(s grpc.ServiceRegistrar, srv AmiiboAPIServer) {
	s.RegisterService(&AmiiboAPI_ServiceDesc, srv)
}

func _AmiiboAPI_GetAmiibo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmiiboRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmiiboAPIServer).GetAmiibo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clutch.amiibo.v1.AmiiboAPI/GetAmiibo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmiiboAPIServer).GetAmiibo(ctx, req.(*GetAmiiboRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AmiiboAPI_ServiceDesc is the grpc.ServiceDesc for AmiiboAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AmiiboAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clutch.amiibo.v1.AmiiboAPI",
	HandlerType: (*AmiiboAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAmiibo",
			Handler:    _AmiiboAPI_GetAmiibo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "amiibo/v1/amiibo.proto",
}
