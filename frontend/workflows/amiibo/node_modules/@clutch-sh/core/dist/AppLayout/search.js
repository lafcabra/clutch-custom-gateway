import React from "react";
import styled from "@emotion/styled";
import { ClickAwayListener, Grid, Icon, IconButton, InputAdornment as MuiInputAdornment, Popper as MuiPopper, TextField, Typography, } from "@material-ui/core";
import CloseIcon from "@material-ui/icons/Close";
import SearchIcon from "@material-ui/icons/Search";
import Autocomplete from "@material-ui/lab/Autocomplete";
import _ from "lodash";
import { useAppContext } from "../Contexts";
import { useNavigate } from "../navigation";
import { searchIndexes } from "./utils";
const hotKey = "/";
const InputField = styled(TextField)({
    // input field
    maxWidth: "551px",
    minWidth: "551px",
    "@media screen and (max-width: 880px)": {
        minWidth: "125px",
    },
    ".MuiInputBase-root": {
        height: "46px",
        border: "1px solid #3548d4",
        borderRadius: "4px",
        background: "#ffffff",
    },
    // input text color
    ".MuiAutocomplete-input": {
        color: "#0d1030",
    },
    // close icon's container
    "div.MuiAutocomplete-endAdornment": {
        ".MuiAutocomplete-popupIndicatorOpen": {
            width: "32px",
            height: "32px",
            borderRadius: "30px",
            marginRight: "8px",
            "&:hover": {
                background: "#e7e7ea",
            },
            "&:active": {
                background: "#DBDBE0",
            },
        },
    },
});
// search's result options container
const ResultGrid = styled(Grid)({
    height: "inherit",
    padding: "12px 16px 12px 16px",
});
// search's result options
const ResultLabel = styled(Typography)({
    color: "#0d1030",
    fontSize: "14px",
});
// main search icon on header
const SearchIconButton = styled(IconButton)({
    color: "#ffffff",
    fontSize: "24px",
    padding: "12px",
    marginRight: "8px",
    "&:hover": {
        background: "#2d3db4",
    },
    "&:active": {
        background: "#2938a5",
    },
});
// search icon in input field
const StartInputAdornment = styled(MuiInputAdornment)({
    color: "#0c0b31",
    marginLeft: "8px",
});
// closed icon svg
const StyledCloseIcon = styled(Icon)({
    color: "#0c0b31",
    fontSize: "24px",
});
// popper containing the search result options
const Popper = styled(MuiPopper)({
    ".MuiAutocomplete-paper": {
        border: "1px solid #e7e7ea",
        boxShadow: "0px 5px 15px rgba(53, 72, 212, 0.2)",
    },
    ".MuiAutocomplete-option": {
        height: "48px",
        padding: "0px",
    },
    ".MuiAutocomplete-option[data-focus='true']": {
        background: "#ebedfb",
    },
    ".MuiAutocomplete-noOptions": {
        fontSize: "14px",
        color: "#0d1030",
    },
});
const renderPopper = props => {
    return React.createElement(Popper, Object.assign({}, props));
};
const CustomCloseIcon = () => {
    return (React.createElement(StyledCloseIcon, null,
        React.createElement(CloseIcon, { fontSize: "small" })));
};
const Input = (params) => {
    const searchRef = React.useRef();
    const handleKeyPress = (event) => {
        if (searchRef.current) {
            if (event.key === hotKey && event.target.nodeName !== "INPUT") {
                // @ts-ignore
                searchRef.current.focus();
            }
            else if (event.key === "Escape") {
                // @ts-ignore
                searchRef.current.blur();
            }
        }
    };
    React.useLayoutEffect(() => {
        window.addEventListener("keydown", handleKeyPress);
    }, []);
    return (React.createElement(InputField, Object.assign({}, params, { autoFocus: true, placeholder: "Search...", fullWidth: true, inputRef: searchRef, InputProps: {
            ...params.InputProps,
            disableUnderline: true,
            startAdornment: (React.createElement(React.Fragment, null,
                React.createElement(StartInputAdornment, { position: "start" },
                    React.createElement(SearchIcon, null)),
                params.InputProps.startAdornment)),
        } })));
};
const Result = ({ option, handleSelection }) => (React.createElement(ResultGrid, { container: true, alignItems: "center", onClick: handleSelection },
    React.createElement(Grid, { item: true, xs: true },
        React.createElement(ResultLabel, null, option.label))));
const filterResults = (searchOptions, state) => {
    return _.filter(searchOptions, o => {
        return o.label.toLowerCase().includes(state.inputValue.toLowerCase());
    });
};
const SearchField = () => {
    const { workflows } = useAppContext();
    const navigate = useNavigate();
    const options = searchIndexes(workflows);
    const [inputValue, setInputValue] = React.useState("");
    const [showOptions, setShowOptions] = React.useState(false);
    const [open, setOpen] = React.useState(false);
    const renderResult = (option) => {
        const handleSelection = () => {
            navigate(option.path);
        };
        return React.createElement(Result, { option: option, handleSelection: handleSelection });
    };
    const onInputChange = (__, value) => {
        if (value === "") {
            setShowOptions(false);
            setInputValue("");
        }
        else if (value !== hotKey) {
            setShowOptions(true);
            setInputValue(value);
        }
        const option = _.find(options, o => {
            return o.label === value;
        });
        if (option !== undefined) {
            setShowOptions(false);
            setInputValue("");
        }
    };
    const onOptionsOpen = () => {
        if (inputValue !== "") {
            setShowOptions(true);
        }
    };
    const onOptionsClose = (event) => {
        setShowOptions(false);
        const option = _.find(options, o => {
            return o.label === event.target.value;
        });
        if (option !== undefined) {
            navigate(option.path);
        }
        setInputValue("");
    };
    const handleOpen = () => {
        setOpen(!open);
    };
    const handleClose = () => {
        setOpen(false);
    };
    // If workflow selected by pressing enter/return,
    // update the open state to collapse search bar to search icon
    function handleListKeyDown(event) {
        if (event.key === "Enter") {
            event.preventDefault();
            setOpen(false);
        }
    }
    return (React.createElement(Grid, { container: true, alignItems: "center" }, open ? (React.createElement(ClickAwayListener, { onClickAway: handleClose },
        React.createElement(Autocomplete, { autoComplete: true, selectOnFocus: true, size: "small", inputValue: inputValue, renderInput: Input, renderOption: renderResult, onInputChange: onInputChange, open: showOptions, onOpen: onOptionsOpen, onClose: onOptionsClose, options: options, filterOptions: filterResults, getOptionLabel: x => x.label, PopperComponent: renderPopper, popupIcon: React.createElement(CustomCloseIcon, null), forcePopupIcon: !!showOptions, noOptionsText: "No results found", onKeyDown: handleListKeyDown }))) : (React.createElement(SearchIconButton, { onClick: handleOpen, edge: "end" },
        React.createElement(SearchIcon, null)))));
};
export default SearchField;
