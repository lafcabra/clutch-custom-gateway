import React from "react";
import { useLocation } from "react-router-dom";
import { ClickAwayListener, Grid, Grow as MuiGrow, MenuList, Paper as MuiPaper, Popper as MuiPopper, } from "@material-ui/core";
import LinkIcon from "@material-ui/icons/Link";
import { generateShortLinkRoute } from "../AppProvider/short-link-proxy";
import { Button, ClipboardButton, IconButton } from "../button";
import { useAppContext, useShortLinkContext } from "../Contexts";
import { Toast } from "../Feedback";
import { TextField } from "../Input";
import { client } from "../Network";
import styled from "../styled";
import { workflowByRoute } from "./utils";
const Grow = styled(MuiGrow)((props) => ({
    transformOrigin: props.placement,
}));
const Popper = styled(MuiPopper)({
    padding: "0 12px",
    marginLeft: "12px",
    zIndex: 1201,
});
const Paper = styled(MuiPaper)({
    width: "400px",
    height: "100px",
    padding: "15px",
    boxShadow: "0px 15px 35px rgba(53, 72, 212, 0.2)",
    borderRadius: "8px",
});
const StyledLinkIcon = styled(IconButton)({
    color: "#ffffff",
    marginRight: "8px",
    padding: "12px",
    "&:hover": {
        background: "#2d3db4",
    },
    "&:active": {
        background: "#2938a5",
    },
}, props => ({
    background: props.$open ? "#2d3db4" : "unset",
}));
/**
 * Component that will display a Button to generate a short link
 * - Will only be displayed if the given workflow has defined the `shortLink` property
 * On click, the component will open a popper window with a Generate ShortLink button
 * On clicking the Generate ShortLink button, the component will do the following:
 * - Read in the data from the temporary storage in the ShortLinkContext
 * - Rotate it into a readable format for the API
 * - Send an API request asking for it to be stored
 * - If successful,
 * -     Will switch to a readable only input field with a clipboard button
 *        to copy the short link with generated hash
 *       (this is the only time it is ever displayed)
 * - If not successful,
 * -     Will display a toast error message for the user
 */
const ShortLinker = () => {
    const { workflows } = useAppContext();
    const { removeWorkflowSession, retrieveWorkflowSession } = useShortLinkContext();
    const [open, setOpen] = React.useState(false);
    const [shortLink, setShortLink] = React.useState(null);
    const [validWorkflow, setValidWorkflow] = React.useState(false);
    const [error, setError] = React.useState(null);
    const anchorRef = React.useRef(null);
    const location = useLocation();
    /**
     * Will fetch the the workflow based on the current route
     * Then checks to see if the shortLink property of the workflow has been set.
     *  - If it has, we will set the validWorkflow state which will allow the component to render
     */
    const checkValidWorkflow = () => {
        var _a;
        const workflow = workflowByRoute(workflows, location.pathname);
        setValidWorkflow((_a = workflow === null || workflow === void 0 ? void 0 : workflow.shortLink) !== null && _a !== void 0 ? _a : false);
    };
    // will trigger on a location change, emptying out our temporary storage and rechecking the workflow
    React.useEffect(() => {
        if (workflows.length) {
            checkValidWorkflow();
        }
        removeWorkflowSession();
    }, [location]);
    // Used for initial load to verify that once our workflows have loaded we are on a valid workflow
    React.useEffect(() => {
        if (workflows.length) {
            checkValidWorkflow();
        }
    }, [workflows]);
    const handleToggle = () => {
        setOpen(o => !o);
        setShortLink(null);
    };
    const handleClose = event => {
        if (anchorRef.current && anchorRef.current.contains(event.target)) {
            return;
        }
        setOpen(false);
    };
    // Will rotate our object into an array of type IShareableState to send in the API request
    const rotateStore = (sessionStore) => Object.keys(sessionStore).map(key => ({ key, state: sessionStore[key] }));
    const generateShortLink = () => {
        if (error) {
            setError(null);
        }
        const requestData = {
            path: `${location.pathname}${location.search}`,
            state: rotateStore(retrieveWorkflowSession()),
        };
        client
            .post("/v1/shortlink/create", requestData)
            .then(response => {
            const { hash } = response.data;
            setShortLink(generateShortLinkRoute(window.location.origin, hash));
        })
            .catch((err) => {
            setError(err);
            setOpen(false);
        });
    };
    if (!validWorkflow) {
        return null;
    }
    return (React.createElement(React.Fragment, null,
        error && (React.createElement(Toast, { title: "Generating Short Link", severity: "error", onClose: () => setError(null) }, error === null || error === void 0 ? void 0 : error.message)),
        React.createElement(StyledLinkIcon, { variant: "neutral", ref: anchorRef, "aria-controls": open ? "header-shortlink" : undefined, "$open": open, "aria-haspopup": "true", onClick: handleToggle, edge: "end", id: "headerShortLinkIcon" },
            React.createElement(LinkIcon, null)),
        React.createElement(Popper, { open: open, anchorEl: anchorRef.current, transition: true, placement: "bottom-end" }, ({ TransitionProps, placement }) => (React.createElement(Grow, Object.assign({}, TransitionProps, { placement: placement === "bottom" ? "center top" : "center bottom" }),
            React.createElement(React.Fragment, null,
                React.createElement(Paper, null,
                    React.createElement(ClickAwayListener, { onClickAway: handleClose },
                        React.createElement(MenuList, { autoFocusItem: open, id: "options" },
                            React.createElement(Grid, { style: { display: "flex", justifyContent: "center" } },
                                !shortLink && (React.createElement(Button, { onClick: generateShortLink, text: "Generate Short Link" })),
                                shortLink && (React.createElement(React.Fragment, null,
                                    React.createElement(TextField, { disabled: true, readOnly: true, value: shortLink }),
                                    React.createElement(ClipboardButton, { text: shortLink, tooltip: "Copy Short Link" })))))))))))));
};
export default ShortLinker;
