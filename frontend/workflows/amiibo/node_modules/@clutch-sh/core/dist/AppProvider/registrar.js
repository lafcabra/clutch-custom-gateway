import _ from "lodash";
const workflowRoutes = (workflowId, workflow, configuration) => {
    const workflowConfig = (configuration === null || configuration === void 0 ? void 0 : configuration[workflowId]) || {};
    const allRoutes = Object.keys(workflowConfig).map(key => {
        // if workflow does not contain route with user-specified key return an empty object
        if (workflow.routes[key] === undefined) {
            /* eslint-disable-next-line no-console */
            console.warn(`[${workflowId}][${key}] Not registered: Invalid config - route does not exist. Valid routes: ${Object.keys(workflow.routes)}`);
            return {};
        }
        return {
            ...workflow.routes[key],
            ...workflowConfig[key],
        };
    });
    // filter out routes that are empty
    _.remove(allRoutes, r => !!_.isEmpty(r));
    const validRoutes = allRoutes.filter(route => {
        const requiredRouteProps = (route === null || route === void 0 ? void 0 : route.requiredConfigProps) || [];
        const missingProps = requiredRouteProps.filter((prop) => {
            var _a;
            return ((_a = route.componentProps) === null || _a === void 0 ? void 0 : _a[prop]) === undefined;
        });
        const isValidRoute = missingProps.length === 0;
        if (!isValidRoute) {
            /* eslint-disable-next-line no-console */
            console.warn(`[${workflowId}][${route.path}] Not registered: Invalid config - missing required component props ${missingProps}`);
        }
        return isValidRoute;
    });
    // eslint-disable-next-line
    validRoutes.map(r => (r.path = r.path.replace(/^\/+/, "").replace(/\/+$/, "")));
    return validRoutes;
};
/**
 * Determine all user registered workflows on the application and apply filters, if any.
 * @param workflows a map of workflow keys to functions that return their configuration.
 * @param configuration the user configuration, usually read in from the clutch.config.js file.
 * @param filters a list of filters to apply to the user registered workflows.
 * @returns
 */
const registeredWorkflows = async (workflows, configuration, filters = []) => {
    let validWorkflows = Object.keys(workflows || [])
        .map((workflowId) => {
        const workflow = workflows[workflowId]();
        try {
            return { ...workflow, routes: workflowRoutes(workflowId, workflow, configuration) };
        }
        catch (_a) {
            // n.b. if the routes aren't configured properly we drop the workflow
            /* eslint-disable-next-line no-console */
            console.warn(`Skipping registration of ${workflowId || "unknown"} workflow due to invalid config`);
            return null;
        }
    })
        .filter(workflow => workflow !== null);
    filters.forEach(f => {
        f(validWorkflows).then(w => {
            validWorkflows = w;
        });
    });
    return validWorkflows;
};
export { registeredWorkflows, workflowRoutes };
