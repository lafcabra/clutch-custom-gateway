import React from "react";
export interface BaseWorkflowProps {
    heading: string;
}
interface Developer {
    contactUrl: string;
    name: string;
}
interface BaseWorkflowConfiguration {
    developer: Developer;
    displayName: string;
    group: string;
    path: string;
    routes: unknown;
}
interface WorkflowShortlinkConfiguration {
    /**
     * (Optional) property to enable a workflow to utilize short linking of its state.
     * This property is required to show the short link generator in the header
     */
    shortLink?: boolean;
}
export interface Workflow extends BaseWorkflowConfiguration, WorkflowShortlinkConfiguration {
    routes: ConfiguredRoute[];
}
export interface WorkflowConfiguration extends BaseWorkflowConfiguration, WorkflowShortlinkConfiguration {
    shortLink?: boolean;
    routes: {
        [key: string]: Route;
    };
}
export interface Route {
    component: React.FC<any>;
    description: string;
    displayName?: string;
    path: string;
    /** Properties required by the Component that are set only via the config. */
    requiredConfigProps?: string[];
    /** Is the workflow discoverable via search and drawer navigation. This defaults to false. */
    hideNav?: boolean;
    /**
     * The feature flag used to determine if the route should be registered.
     *
     * If this is not set the route will always be registered.
     */
    featureFlag?: string;
}
export interface ConfiguredRoute extends Route {
    componentProps?: object;
    trending?: boolean;
}
interface ErrorBoundaryProps {
    workflow: Workflow;
}
interface ErrorBoundaryState {
    error: Error;
    errorInfo: React.ErrorInfo;
    showDetails: boolean;
}
declare class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
    constructor(props: {
        workflow: Workflow;
    });
    componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void;
    onDetailsClose(): void;
    onDetailsOpen(): void;
    render(): React.ReactNode;
}
export default ErrorBoundary;
