import React from "react";
import { Grid, IconButton } from "@material-ui/core";
import LaunchIcon from "@material-ui/icons/Launch";
import { Alert } from "@material-ui/lab";
import { Dialog, DialogContent } from "../dialog";
import Code from "../text";
class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { error: null, errorInfo: null, showDetails: false };
        this.onDetailsClose = this.onDetailsClose.bind(this);
        this.onDetailsOpen = this.onDetailsOpen.bind(this);
    }
    componentDidCatch(error, errorInfo) {
        this.setState({ error, errorInfo });
    }
    onDetailsClose() {
        this.setState(state => {
            return { ...state, showDetails: false };
        });
    }
    onDetailsOpen() {
        this.setState(state => {
            return { ...state, showDetails: true };
        });
    }
    render() {
        var _a;
        const { children, workflow } = this.props;
        const { error, errorInfo, showDetails } = this.state;
        const defaultErrorMsg = (React.createElement(React.Fragment, null,
            "Failed to load ",
            workflow.displayName,
            " workflow. Please contact the developer"));
        if (error) {
            let message = defaultErrorMsg;
            if (workflow === null || workflow === void 0 ? void 0 : workflow.developer) {
                const developerName = ` ${(_a = workflow.developer) === null || _a === void 0 ? void 0 : _a.name}` || "Unknown";
                const link = (React.createElement("a", { rel: "noopener noreferrer", target: "_blank", href: workflow.developer.contactUrl }, developerName));
                message = (React.createElement(React.Fragment, null,
                    defaultErrorMsg,
                    ":",
                    link,
                    "."));
            }
            return (React.createElement(Grid, { container: true, direction: "column", justify: "center", alignItems: "center" },
                React.createElement(Dialog, { onClose: this.onDetailsClose, open: showDetails, title: "Stack Trace" },
                    React.createElement(DialogContent, null,
                        React.createElement(Code, null, (errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.componentStack) || "Could not determine stack trace"))),
                React.createElement(Alert, { severity: "error", action: React.createElement(IconButton, { "aria-label": "error", color: "inherit", size: "small", onClick: this.onDetailsOpen },
                        React.createElement(LaunchIcon, null)) },
                    React.createElement("div", null, message))));
        }
        return children;
    }
}
export default ErrorBoundary;
