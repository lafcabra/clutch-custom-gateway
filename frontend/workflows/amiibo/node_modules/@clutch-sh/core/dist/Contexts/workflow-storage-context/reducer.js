import { removeLocalData, storeLocalData, transformAPISharedState } from "./helpers";
/**
 * Reducer for the WorkflowStorageContext
 * This will act on the WorkflowStorageState and add / remove items from the temporary storage
 * as well as localStorage, this will (optionally) keep all storage actions in one location for all
 * workflows and allow for easier state hydration
 */
const workflowStorageContextReducer = (state, action) => {
    switch (action.type) {
        // Will add data to our temporary storage as well as the local storage
        case "STORE_DATA": {
            const { componentName, key, data, localStorage = true } = action.payload;
            const newState = { ...state };
            const { fromShortLink, workflowSessionStore } = newState;
            if (!componentName || !componentName.length) {
                return state;
            }
            if (!workflowSessionStore[componentName]) {
                workflowSessionStore[componentName] = {};
            }
            if (key.length) {
                workflowSessionStore[componentName][key] = data;
            }
            else {
                workflowSessionStore[componentName] = {
                    ...workflowSessionStore[componentName],
                    ...data,
                };
            }
            if (localStorage && !fromShortLink) {
                storeLocalData(key !== null && key !== void 0 ? key : componentName, data);
            }
            return { ...newState, workflowSessionStore };
        }
        // Will remove data from our temporary storage as well as the local storage
        case "REMOVE_DATA": {
            const { componentName, key, localStorage = true } = action.payload;
            const newState = { ...state };
            const { fromShortLink, workflowSessionStore } = newState;
            if (!componentName || !componentName.length) {
                return state;
            }
            if (componentName && key) {
                delete workflowSessionStore[componentName][key];
            }
            else if (componentName) {
                delete workflowSessionStore[componentName];
            }
            if (localStorage && !fromShortLink) {
                removeLocalData(key !== null && key !== void 0 ? key : componentName);
            }
            return newState;
        }
        // Will take a given input of data from an API and add it to the state as 'store', the only time this portion of the state should ever be modified
        case "HYDRATE": {
            const { data } = action.payload;
            if (data) {
                return {
                    ...state,
                    fromShortLink: true,
                    workflowStore: transformAPISharedState(data),
                };
            }
            return state;
        }
        default:
            throw new Error("Unknown workflow storage reducer action");
    }
};
export default workflowStorageContextReducer;
