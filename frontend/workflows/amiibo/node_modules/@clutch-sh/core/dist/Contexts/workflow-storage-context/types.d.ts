import type { clutch as IClutch } from "@clutch-sh/api";
export interface HydrateData {
    route: string;
    data: HydratedData;
}
/**
 * {
 *      componentName1: {
 *          key1: {
 *              data: ...
 *          },
 *          key2: {
 *              data: ...
 *          },
 *      }
 * }
 */
export interface HydratedData {
    [key: string]: {
        [key: string]: unknown;
    };
}
declare type ComponentStorageActionKind = "STORE_DATA" | "REMOVE_DATA";
declare type HydrateStorageActionKind = "HYDRATE";
export interface HydratePayload {
    data?: IClutch.shortlink.v1.IShareableState[];
}
export interface ComponentPayload {
    componentName?: string;
    key?: string;
    data?: unknown;
    localStorage?: boolean;
}
interface ComponentStorageAction {
    type: ComponentStorageActionKind;
    payload: ComponentPayload;
}
interface HydrateStorageAction {
    type: HydrateStorageActionKind;
    payload?: HydratePayload;
}
export declare type Action = ComponentStorageAction | HydrateStorageAction;
export interface WorkflowStorageState {
    fromShortLink: boolean;
    workflowStore: HydratedData;
    workflowSessionStore: HydratedData;
}
export declare type RemoveDataFn = (componentName: string, key: string, localStorage?: boolean) => void;
export declare type RetrieveDataFn = <T>(componentName: string, key: string, defaultData?: T) => T;
export declare type StoreDataFn = (componentName: string, key: string, data: unknown, localStorage?: boolean) => void;
export interface WorkflowStorageContextProps {
    fromShortLink: boolean;
    removeData: RemoveDataFn;
    retrieveData: RetrieveDataFn;
    storeData: StoreDataFn;
}
declare const defaultWorkflowStorageState: WorkflowStorageState;
export { defaultWorkflowStorageState };
