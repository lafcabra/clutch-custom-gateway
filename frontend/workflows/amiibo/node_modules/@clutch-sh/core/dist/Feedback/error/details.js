import React from "react";
import { Accordion as MuiAccordion, AccordionDetails as MuiAccordionDetails, AccordionSummary as MuiAccordionSummary, Button, Grid, useControlled, } from "@material-ui/core";
import ChevronRightIcon from "@material-ui/icons/ChevronRight";
import KeyboardArrowDownIcon from "@material-ui/icons/KeyboardArrowDown";
import { isClutchErrorDetails } from "../../Network/errors";
import { grpcCodeToText } from "../../Network/grpc";
import styled from "../../styled";
import ErrorDetailsDialog from "./dialog";
const ERROR_DETAILS_RENDER_MAX = 4;
const ErrorDetailDivider = styled("div")({
    background: "linear-gradient(to right, #DB3615 8px, rgba(219, 54, 21, 0.4) 0%)",
    height: "1px",
    width: "100%",
});
const Accordion = styled(MuiAccordion)({
    ":before": {
        height: "0",
    },
});
const AccordionSummary = styled(MuiAccordionSummary)({
    background: "linear-gradient(to right, #DB3615 8px, #FDE9E7 0%)",
    color: "#0D1030",
    fontSize: "14px",
    fontWeight: 400,
    padding: "12px 16px 12px 24px",
    minHeight: "fit-content",
    "& .MuiAccordionSummary-content": {
        margin: "0",
        alignItems: "center",
    },
    "&.MuiAccordionSummary-root.Mui-expanded": {
        minHeight: "unset",
    },
}, props => ({
    borderBottomLeftRadius: props.$expanded ? "0" : "8px",
    borderBottomRightRadius: props.$expanded ? "0" : "8px",
}));
const AccordionDetails = styled(MuiAccordionDetails)({
    background: "linear-gradient(to right, #DB3615 8px, #FFFFFF 0%)",
    padding: "0",
    paddingLeft: "8px",
    borderBottomLeftRadius: "8px",
    borderBottomRightRadius: "8px",
    display: "flex",
    flexDirection: "column",
});
const ListItem = styled("li")({
    "::marker": {
        color: "rgba(13, 16, 48, 0.6)",
    },
    padding: "2px 0",
});
const ErrorDetailContainer = styled("div")({
    width: "100%",
    border: "1px solid #E7E7EA",
    padding: "16px 16px 16px 24px",
    borderBottomRightRadius: "8px",
    borderTop: "unset",
});
const ErrorDetailText = styled("div")({
    color: "rgba(13, 16, 48, 0.6)",
    fontSize: "14px",
    lineHeight: "24px",
});
const DialogButton = styled(Button)({
    color: "#3548D4",
    fontWeight: 700,
    fontSize: "14px",
    padding: "9px 32px",
});
const ErrorDetails = ({ error }) => {
    const [detailsOpen, setDetailsOpen] = React.useState(false);
    const [expanded, setExpanded] = useControlled({
        controlled: undefined,
        default: false,
        name: "Error Accordion",
        state: "expanded",
    });
    React.useEffect(() => {
        setDetailsOpen(false);
    }, [error]);
    const hasWrappedErrorDetails = error.details.filter(detail => isClutchErrorDetails(detail)).length > 0;
    const summaryIconStyle = { marginRight: "8px" };
    return (React.createElement(React.Fragment, null,
        React.createElement(ErrorDetailDivider, null),
        React.createElement(Accordion, { elevation: 0, expanded: expanded },
            React.createElement(AccordionSummary, { "aria-controls": "panel1a-content", "$expanded": expanded, onClick: () => setExpanded(!expanded) }, !expanded ? (React.createElement(React.Fragment, null,
                React.createElement(ChevronRightIcon, { style: summaryIconStyle }),
                " Show more")) : (React.createElement(React.Fragment, null,
                React.createElement(KeyboardArrowDownIcon, { style: summaryIconStyle }),
                " Show less"))),
            React.createElement(AccordionDetails, null,
                React.createElement(ErrorDetailContainer, null,
                    hasWrappedErrorDetails && (React.createElement("div", null,
                        React.createElement(ErrorDetailText, { style: { color: "#0D1030" } }, "The following errors were encountered:"),
                        React.createElement("ul", { style: { paddingLeft: "16px", margin: "4px 0" } }, error.details.map(detail => {
                            // Only render Clutch Error wrapped details errors here
                            if (isClutchErrorDetails(detail)) {
                                const renderItems = detail.wrapped.slice(0, ERROR_DETAILS_RENDER_MAX);
                                const remainingItems = detail.wrapped.length - ERROR_DETAILS_RENDER_MAX;
                                return (React.createElement(React.Fragment, null,
                                    renderItems.map((wrapped, idx) => {
                                        // TODO: This color should be colored according to status code
                                        const color = "#DB3615";
                                        return (
                                        // eslint-disable-next-line react/no-array-index-key
                                        React.createElement(ListItem, { key: `${idx}-${wrapped.message}` },
                                            React.createElement(ErrorDetailText, null,
                                                React.createElement("span", { style: { fontWeight: 500, color } },
                                                    grpcCodeToText(wrapped.code),
                                                    "\u00A0"),
                                                wrapped.message)));
                                    }),
                                    remainingItems > 0 && (React.createElement(ErrorDetailText, { style: { margin: "2px 0" } },
                                        "and ",
                                        remainingItems,
                                        " more..."))));
                            }
                            return null;
                        })))),
                    React.createElement(Grid, { container: true, justify: "flex-end" },
                        React.createElement(DialogButton, { onClick: () => setDetailsOpen(true) }, "More Details"))))),
        React.createElement(ErrorDetailsDialog, { error: error, open: detailsOpen, onClose: () => setDetailsOpen(false) })));
};
export default ErrorDetails;
