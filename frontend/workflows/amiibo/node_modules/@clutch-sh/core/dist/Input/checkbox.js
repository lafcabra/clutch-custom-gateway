import * as React from "react";
import { Checkbox as MuiCheckbox, FormControl as MuiFormControl, FormControlLabel, FormGroup, FormLabel, Grid, } from "@material-ui/core";
import CheckIcon from "@material-ui/icons/Check";
import styled from "../styled";
const FormControl = styled(MuiFormControl)({
    width: "75%",
});
const StyledCheckbox = styled(MuiCheckbox)({
    color: "#6e7083",
    borderRadius: "50%",
    "&:hover": {
        background: "#f5f6fd",
    },
    "&:active": {
        background: "#d7daf6",
    },
    "&.Mui-checked": {
        color: "#ffffff",
        "&:hover": {
            background: "#f5f6fd",
        },
        "&:active": {
            background: "#d7daf6",
        },
        "&.Mui-disabled": {
            color: "#e7e7ea",
            ".MuiIconButton-label": {
                color: "rgba(13, 16, 48, 0.38)",
            },
        },
    },
});
const Icon = styled("div")({
    borderRadius: "2px",
    boxSizing: "border-box",
}, props => ({
    height: props.$size,
    width: props.$size,
    border: props.$disabled ? "1px solid #e7e7ea" : "1px solid #6e7083",
}));
const SelectedIcon = styled("div")({
    borderRadius: "2px",
    boxSizing: "border-box",
    ".MuiSvgIcon-root": {
        display: "block",
    },
}, props => ({
    height: props.$size,
    width: props.$size,
    background: props.$disabled ? "#e7e7eA" : "#3548d4",
    ".MuiSvgIcon-root": {
        height: props.$size,
        width: props.$size,
    },
}));
// TODO (sperry): add 16px size variant
const Checkbox = ({ checked, disabled = false, size, ...props }) => {
    let sizePx;
    switch (size) {
        case "small":
            sizePx = "20px";
            break;
        default:
            sizePx = "24px";
    }
    return (React.createElement(StyledCheckbox, Object.assign({ checked: checked, size: size, icon: React.createElement(Icon, { "$disabled": disabled, "$size": sizePx }), checkedIcon: React.createElement(SelectedIcon, { "$disabled": disabled, "$size": sizePx },
            React.createElement(CheckIcon, null)) }, props, { disabled: disabled })));
};
const CheckboxPanel = ({ header, options, onChange }) => {
    const allOptions = {};
    Object.keys(options).forEach(option => {
        allOptions[option] = { checked: options[option], value: option };
    });
    const [selected, setSelected] = React.useState(allOptions);
    const onToggle = e => {
        const targetName = e.target.name;
        const targetValue = e.target.checked;
        const selectedOption = { ...selected[targetName], checked: targetValue };
        const updatedSelections = { ...selected, [targetName]: selectedOption };
        setSelected(updatedSelections);
        const callbackOptions = {};
        Object.keys(allOptions).forEach(option => {
            callbackOptions[option] =
                option === targetName
                    ? targetValue
                    : selected[option]
                        ? selected[option].checked
                        : allOptions[option].checked;
        });
        onChange(callbackOptions);
    };
    const optionKeys = Object.keys(allOptions);
    const column1Keys = [...optionKeys].splice(0, Math.ceil(optionKeys.length / 2));
    const column2Keys = [...optionKeys].splice(column1Keys.length, optionKeys.length);
    return (React.createElement(FormControl, null,
        React.createElement(Grid, { container: true, direction: "column" },
            React.createElement(FormLabel, { color: "secondary", focused: true }, header),
            React.createElement(Grid, { container: true, direction: "row" },
                React.createElement(FormGroup, null, column1Keys.map(option => (React.createElement(FormGroup, { row: true, key: option },
                    React.createElement(FormControlLabel, { key: option, control: React.createElement(Checkbox, { checked: selected[option].checked, onChange: onToggle, name: option }), label: option }))))),
                React.createElement(FormGroup, null, column2Keys.map(option => (React.createElement(FormGroup, { row: true, key: option },
                    React.createElement(FormControlLabel, { key: option, control: React.createElement(Checkbox, { checked: selected[option].checked, onChange: onToggle, name: option }), label: option })))))))));
};
export { CheckboxPanel, Checkbox };
