import * as React from "react";
import styled from "@emotion/styled";
import { FormControl as MuiFormControl, FormControlLabel, FormLabel as MuiFormLabel, RadioGroup as MuiRadioGroup, } from "@material-ui/core";
import Radio from "./radio";
const FormLabel = styled(MuiFormLabel)({
    "&&": {
        color: "#2D3F50",
    },
    fontWeight: "bold",
    position: "relative",
    "&.Mui-disabled": {
        opacity: "0.75",
    },
});
const FormControl = styled(MuiFormControl)({
    margin: "16px 0",
    minWidth: "fit-content",
});
const RadioGroup = ({ defaultOption = 0, label, disabled, name, options, onChange, }) => {
    var _a;
    const defaultIdx = defaultOption < options.length ? defaultOption : 0;
    const [selectedIdx, setSelectedIdx] = React.useState(defaultIdx);
    React.useEffect(() => {
        var _a;
        if (onChange !== undefined && options.length !== 0) {
            onChange(((_a = options[selectedIdx]) === null || _a === void 0 ? void 0 : _a.value) || options[selectedIdx].label);
        }
    }, []);
    const updateSelectedOption = (event) => {
        const { value } = event.target;
        const optionValues = options.map(o => (o === null || o === void 0 ? void 0 : o.value) || o.label);
        setSelectedIdx(optionValues.indexOf(value));
        if (onChange !== undefined) {
            onChange(value);
        }
    };
    if (options.length === 0) {
        return null;
    }
    return (React.createElement(FormControl, { key: name, disabled: disabled },
        label && React.createElement(FormLabel, null, label),
        React.createElement(MuiRadioGroup, { "aria-label": label, name: name, defaultValue: ((_a = options[defaultIdx]) === null || _a === void 0 ? void 0 : _a.value) || options[defaultIdx].label, onChange: updateSelectedOption }, options.map((option, idx) => {
            return (React.createElement(FormControlLabel, { key: option.label, value: (option === null || option === void 0 ? void 0 : option.value) || option.label, control: React.createElement(Radio, { selected: idx === selectedIdx }), label: option.label }));
        }))));
};
export default RadioGroup;
