import React, { useState } from "react";
import { clutch as IClutch } from "@clutch-sh/api";
import { Grid as MuiGrid } from "@material-ui/core";
import MuiSuccessIcon from "@material-ui/icons/CheckCircle";
import { debounce } from "lodash";
import { v4 as uuid } from "uuid";
import { userId } from "../AppLayout/user";
import { Button } from "../button";
import { Alert } from "../Feedback";
import { Select, TextField } from "../Input";
import { client } from "../Network";
import styled from "../styled";
import { Typography } from "../typography";
import EmojiRatings from "./emojiRatings";
// Defaults in case of API failure
export const defaults = {
    prompt: "Rate Your Experience",
    freeformPrompt: "What would you recommend to improve this?",
    ratingLabels: [
        {
            emoji: 1,
            label: "bad",
        },
        {
            emoji: 2,
            label: "ok",
        },
        {
            emoji: 3,
            label: "great",
        },
    ],
};
const StyledButton = styled(Button)({}, ({ $origin }) => $origin === "WIZARD"
    ? {
        fontSize: "14px",
        padding: "0 8px",
        height: "18px",
    }
    : null);
const StyledTextField = styled(TextField)({
    margin: "16px 0px 32px 0px",
}, ({ $origin }) => ({
    ".MuiInputBase-root": {
        fontSize: $origin === "WIZARD" ? "14px" : "16px",
    },
}));
const FeedbackAlert = () => {
    const AlertProps = {
        iconMapping: {
            info: React.createElement(MuiSuccessIcon, { style: { color: "#3548d4" } }),
        },
        style: {
            margin: "32px",
            alignItems: "center",
        },
    };
    return (React.createElement(Alert, Object.assign({ severity: "info" }, AlertProps),
        React.createElement(Typography, { variant: "subtitle3" }, "Thank you for your feedback!")));
};
export const FEEDBACK_MAX_LENGTH = 280;
/**
 * NPS feedback component which is the base for both Wizard and Anytime.
 * Will fetch given survey options from the server based on the given origin
 * Then display a feedback component based on the given emoji ratings
 *
 * @param opts Available feedback options
 * @returns NPSFeedback component
 */
const NPSFeedback = ({ origin = "HEADER", onSubmit, feedbackTypes }) => {
    const [hasSubmit, setHasSubmit] = useState(false);
    const [selectedRating, setSelectedRating] = useState(null);
    const [freeformFeedback, setFreeformFeedback] = useState("");
    const [error, setError] = useState(false);
    const [survey, setSurvey] = useState({});
    const [feedbackType, setFeedbackType] = useState(null);
    const [requestId, setRequestId] = useState("");
    const maxLength = FEEDBACK_MAX_LENGTH;
    const debounceTimer = 500;
    const wizardOrigin = origin === "WIZARD";
    const trimmed = freeformFeedback.trim().length > maxLength
        ? `${freeformFeedback.trim().substring(0, maxLength - 3)}...`
        : freeformFeedback;
    const textFieldProps = {
        fullWidth: true,
        InputProps: {
            rows: 3,
            rowsMax: 3,
        },
    };
    // Will fetch the survey results for the given origin on load
    React.useEffect(() => {
        let data = defaults;
        client
            .post("/v1/feedback/getSurveys", {
            origins: [origin],
        })
            .then(response => {
            var _a, _b;
            const surveyData = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.originSurvey;
            data = (_b = surveyData[origin]) !== null && _b !== void 0 ? _b : defaults;
        })
            .catch((err) => {
            // eslint-disable-next-line no-console
            console.error(err);
        })
            .finally(() => {
            setRequestId(uuid());
            setSurvey(data);
            if (feedbackTypes && feedbackTypes.length) {
                setFeedbackType(feedbackTypes[0].value || feedbackTypes[0].label);
            }
        });
    }, []);
    // Will debounce feedback requests to the server in case of multiple quick changes to selected
    const sendFeedback = React.useCallback(debounce((formData) => {
        client
            .post("/v1/feedback/submitFeedback", { userId: userId(), ...formData })
            .catch((err) => {
            // eslint-disable-next-line no-console
            console.error(err);
        });
    }, debounceTimer), []);
    // On a change to submit or selected will attempt to send a feedback request
    React.useEffect(() => {
        if (selectedRating) {
            sendFeedback({
                id: requestId,
                feedback: {
                    feedbackType: wizardOrigin ? window.location.pathname : feedbackType,
                    freeformResponse: trimmed,
                    ratingLabel: selectedRating.label,
                    ratingScale: {
                        emoji: IClutch.feedback.v1.EmojiRating[selectedRating.emoji],
                    },
                },
                metadata: {
                    survey,
                    origin: IClutch.feedback.v1.Origin[origin],
                    userSubmitted: hasSubmit,
                    urlSearchParams: window.location.search,
                },
            });
        }
    }, [selectedRating, feedbackType, hasSubmit]);
    // Form onSubmit handler
    const submitFeedback = e => {
        if (e) {
            e.preventDefault();
        }
        setHasSubmit(true);
        if (onSubmit) {
            onSubmit(true);
        }
    };
    if (hasSubmit) {
        return React.createElement(FeedbackAlert, null);
    }
    return (React.createElement("form", { onSubmit: submitFeedback },
        React.createElement(MuiGrid, { container: true, direction: "row", alignItems: "center", style: { padding: wizardOrigin ? "16px" : "24px" } },
            React.createElement(MuiGrid, { item: true, xs: true },
                React.createElement(Typography, { variant: wizardOrigin ? "subtitle3" : "subtitle2" }, survey.prompt)),
            React.createElement(MuiGrid, { item: true, xs: wizardOrigin ? 6 : 12, style: { display: "flex", justifyContent: "space-around", paddingTop: "8px" } },
                React.createElement(EmojiRatings, { ratings: survey.ratingLabels, setRating: setSelectedRating, placement: wizardOrigin ? "top" : "bottom", buttonSize: wizardOrigin ? "small" : "medium" })),
            selectedRating !== null && (React.createElement(React.Fragment, null,
                !wizardOrigin && feedbackTypes && (React.createElement(MuiGrid, { item: true, xs: 12, style: { margin: "24px 0px 16px 0px" } },
                    React.createElement(Select, { name: "anytimeSelect", label: "Choose a type of feedback you want to submit", options: feedbackTypes, onChange: setFeedbackType }))),
                React.createElement(MuiGrid, { item: true, xs: 12 },
                    React.createElement(StyledTextField, Object.assign({ multiline: true, fullWidth: true, "$origin": origin, placeholder: survey.freeformPrompt, value: freeformFeedback, helperText: `${freeformFeedback === null || freeformFeedback === void 0 ? void 0 : freeformFeedback.trim().length} / ${maxLength}`, error: error, onChange: e => {
                            var _a, _b, _c;
                            setFreeformFeedback((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.value);
                            setError(((_c = (_b = e === null || e === void 0 ? void 0 : e.target) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.trim().length) > maxLength);
                        } }, textFieldProps))),
                React.createElement(MuiGrid, { item: true, xs: 12, style: {
                        display: "flex",
                        justifyContent: wizardOrigin ? "center" : "flex-end",
                    } },
                    React.createElement(StyledButton, { type: "submit", text: "Submit", "$origin": origin, variant: wizardOrigin ? "secondary" : "primary", disabled: error })))))));
};
export default NPSFeedback;
