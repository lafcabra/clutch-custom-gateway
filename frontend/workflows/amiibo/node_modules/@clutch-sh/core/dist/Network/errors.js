import { grpcCodeToText } from "./grpc";
/**
 * Construct a ClutchError from an AxiosError.
 *
 * @param clientError A client error object.
 */
const grpcResponseToError = (clientError) => {
    const { data } = clientError === null || clientError === void 0 ? void 0 : clientError.response;
    const error = {
        code: data.code,
        message: data.message,
        status: {
            code: clientError.response.status,
            text: grpcCodeToText(data.code),
        },
    };
    if ((data === null || data === void 0 ? void 0 : data.details) !== undefined && data.details.length > 0) {
        // reassign the @type prop to make the details TS friendly.
        const details = data.details.map(detail => {
            const filteredDetail = { ...detail, _type: detail["@type"] };
            delete filteredDetail["@type"];
            return filteredDetail;
        });
        error.details = details;
    }
    return error;
};
/* eslint-disable no-underscore-dangle */
const isHelpDetails = (details) => {
    return details._type === "types.googleapis.com/google.rpc.Help";
};
const isClutchErrorDetails = (details) => {
    return details._type === "type.googleapis.com/clutch.api.v1.ErrorDetails";
};
/* eslint-enable */
export { grpcResponseToError, isClutchErrorDetails, isHelpDetails };
