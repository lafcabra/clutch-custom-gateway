import * as $pbclutch from "@clutch-sh/api";
import _ from "lodash";
import { client } from "../Network";
const fetchResourceSchemas = async (type) => {
    const response = await client.post("/v1/resolver/getObjectSchemas", {
        type_url: `type.googleapis.com/${type}`,
    });
    return response.data.schemas.map((schema) => $pbclutch.clutch.resolver.v1.Schema.fromObject(schema));
};
const resolveQuery = async (type, limit, fields) => {
    const response = await client.post("/v1/resolver/search", {
        want: `type.googleapis.com/${type}`,
        query: fields.query,
        limit,
    });
    return { results: response.data.results, failures: response.data.partialFailures };
};
const resolveFields = async (type, limit, fields) => {
    var _a, _b;
    const response = await client.post("/v1/resolver/resolve", {
        want: `type.googleapis.com/${type}`,
        have: fields,
        limit,
    });
    return { results: ((_a = response.data) === null || _a === void 0 ? void 0 : _a.results) || [], failures: ((_b = response.data) === null || _b === void 0 ? void 0 : _b.partialFailures) || [] };
};
const resolveResource = async (type, limit, fields, onResolve, onError, apiPackage) => {
    const resolver = (fields === null || fields === void 0 ? void 0 : fields.query) !== undefined ? resolveQuery : resolveFields;
    return resolver(type, limit, fields)
        .then(({ results, failures }) => {
        // n.b. default to using the open source @clutch-sh/api package to resolve the
        // resource against unless a custom package has been specified by the workflow.
        let pbClutch = _.get($pbclutch, type);
        if (apiPackage) {
            pbClutch = _.get(apiPackage, type);
        }
        const resultObjects = results.map(result => pbClutch.fromObject(result));
        const partialFailures = failures.map(failure => failure.message);
        if (_.some(resultObjects) !== undefined) {
            onResolve(resultObjects, partialFailures);
        }
    })
        .catch(err => onError(err));
};
export { fetchResourceSchemas, resolveResource };
