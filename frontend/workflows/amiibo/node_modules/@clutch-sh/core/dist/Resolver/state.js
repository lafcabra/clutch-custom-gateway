import React from "react";
var ResolverAction;
(function (ResolverAction) {
    ResolverAction[ResolverAction["SCHEMAS_LOADING"] = 0] = "SCHEMAS_LOADING";
    ResolverAction[ResolverAction["SCHEMAS_SUCCCESS"] = 1] = "SCHEMAS_SUCCCESS";
    ResolverAction[ResolverAction["SCHEMAS_ERROR"] = 2] = "SCHEMAS_ERROR";
    ResolverAction[ResolverAction["RESOLVING"] = 3] = "RESOLVING";
    ResolverAction[ResolverAction["RESOLVE_ERROR"] = 4] = "RESOLVE_ERROR";
    ResolverAction[ResolverAction["RESOLVE_SUCCESS"] = 5] = "RESOLVE_SUCCESS";
})(ResolverAction || (ResolverAction = {}));
const initialState = {
    schemasLoading: true,
    allSchemas: [],
    searchableSchemas: [],
    schemaFetchError: undefined,
    resolverLoading: false,
    resolverData: {},
    resolverFetchError: undefined,
};
const reducer = (state, action) => {
    switch (action.type) {
        case ResolverAction.SCHEMAS_LOADING:
            return { ...initialState };
        case ResolverAction.SCHEMAS_SUCCCESS:
            return {
                ...state,
                schemasLoading: false,
                schemaFetchError: undefined,
                searchableSchemas: action.allSchemas
                    .map(schema => {
                    return schema.metadata.searchable || schema.metadata.search.enabled ? schema : null;
                })
                    .filter(x => x),
                allSchemas: action.allSchemas,
            };
        case ResolverAction.SCHEMAS_ERROR:
            return {
                ...state,
                schemasLoading: false,
                schemaFetchError: action.error,
            };
        case ResolverAction.RESOLVING:
            return {
                ...state,
                resolverLoading: true,
                resolverFetchError: undefined,
            };
        case ResolverAction.RESOLVE_ERROR:
            return {
                ...state,
                resolverLoading: false,
                resolverFetchError: action.error,
            };
        case ResolverAction.RESOLVE_SUCCESS:
            return {
                ...state,
                resolverLoading: false,
                resolverFetchError: undefined,
            };
        default:
            throw new Error(`Unknown resolver action: ${action.type}`);
    }
};
const useResolverState = () => {
    return React.useReducer(reducer, initialState);
};
export { ResolverAction, useResolverState };
