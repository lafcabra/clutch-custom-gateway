import * as React from "react";
import type { TableCellProps as MuiTableCellProps, TableProps as MuiTableProps, TableRowProps as MuiTableRowProps } from "@material-ui/core";
import type { Breakpoint } from "@material-ui/core/styles/createBreakpoints";
interface TableCellProps extends MuiTableCellProps {
    action?: boolean;
    border?: boolean;
    responsive?: boolean;
}
declare const TableCell: ({ action, border, responsive, ...props }: TableCellProps) => JSX.Element;
interface TableContainerProps {
    children: React.ReactElement<TableProps>;
}
declare const TableContainer: ({ children }: TableContainerProps) => JSX.Element;
interface TableProps extends Pick<MuiTableProps, "stickyHeader"> {
    /** The names of the columns. This must be set (even to empty string) to render the table. */
    columns: string[];
    /** The breakpoint at which to compress the table rows. By default the small breakpoint is used. */
    compressBreakpoint?: Breakpoint;
    /** Hide the header. By default this is false. */
    hideHeader?: boolean;
    /** Add an actions column. By default this is false. */
    actionsColumn?: boolean;
    /** Make table responsive */
    responsive?: boolean;
    /** Table rows to render */
    children?: (React.ReactElement<TableRowProps> | null | undefined | {})[] | React.ReactElement<TableRowProps>;
}
declare const Table: React.FC<TableProps>;
export interface TableRowProps extends Pick<MuiTableRowProps, "onClick"> {
    children?: React.ReactNode;
    /**
     * The default element to render if children are null. If not present and a child is null
     * this the child's value will be used.
     */
    cellDefault?: React.ReactNode;
    /**
     * Make the table row responsive. This is mainly used for internal rendering. Consumers
     * should set the responsive prop on the table.
     */
    responsive?: boolean;
}
declare const TableRow: ({ children, onClick, cellDefault, responsive }: TableRowProps) => JSX.Element;
interface TableRowActionProps {
    children: string;
    onClick: () => void;
    icon?: React.ReactElement;
}
declare const TableRowAction: ({ children, onClick, icon }: TableRowActionProps) => JSX.Element;
interface TableRowActionsProps {
    children?: React.ReactElement<TableRowActionProps> | React.ReactElement<TableRowActionProps>[];
}
declare const TableRowActions: ({ children }: TableRowActionsProps) => JSX.Element;
export { TableCell, Table, TableContainer, TableRow, TableRowAction, TableRowActions };
export type { TableProps };
export type { TableContainerProps };
