import * as React from "react";
import { IconButton, Paper as MuiPaper, Table as MuiTable, TableBody as MuiTableBody, TableCell as MuiTableCell, TableContainer as MuiTableContainer, TableHead as MuiTableHead, TableRow as MuiTableRow, useMediaQuery, } from "@material-ui/core";
import MoreVertIcon from "@material-ui/icons/MoreVert";
import { Popper, PopperItem } from "../popper";
import styled from "../styled";
import { Typography } from "../typography";
const StyledPaper = styled(MuiPaper)({
    border: "1px solid #E7E7EA",
});
const StyledTable = styled(MuiTable)({
    minWidth: "100%",
    borderCollapse: "collapse",
    alignItems: "center",
}, props => ({
    display: !props.$responsive ? "table" : props.$compress ? "table" : "grid",
    gridTemplateColumns: `repeat(${props.$columnCount}, auto)${props.$hasActionsColumn ? " 80px" : ""}`,
}));
const StyledTableBody = styled(MuiTableBody)({
    display: "contents",
});
const StyledTableHead = styled(MuiTableHead)({
    display: "contents",
    backgroundColor: "#D7DAF6",
});
const StyledTableRow = styled(MuiTableRow)({
    ":nth-of-type(even)": {
        background: "#F8F8F9",
    },
    ":hover": {
        background: "#EBEDFB",
    },
}, props => ({
    display: props.$responsive ? "contents" : "",
}));
const StyledTableCell = styled(MuiTableCell)({
    alignItems: "center",
    fontSize: "14px",
    padding: "15px 16px",
    color: "#0D1030",
    overflow: "hidden",
    background: "inherit",
    minHeight: "100%",
}, props => ({
    borderBottom: (props === null || props === void 0 ? void 0 : props.$border) ? "1px solid #E7E7EA" : "0",
    display: props.$responsive ? "flex" : "",
    width: !props.$responsive && props.$action ? "80px" : "",
}));
const TableCell = ({ action, border, responsive, ...props }) => (React.createElement(StyledTableCell, Object.assign({ "$action": action, "$border": border, "$responsive": responsive }, props)));
const TableContainer = ({ children }) => (React.createElement(MuiTableContainer, { component: StyledPaper, elevation: 0 }, children));
const Table = ({ columns, compressBreakpoint = "sm", hideHeader = false, actionsColumn = false, responsive = false, children, ...props }) => {
    const showHeader = !hideHeader;
    const compress = useMediaQuery((theme) => theme.breakpoints.down(compressBreakpoint));
    return (React.createElement(TableContainer, null,
        React.createElement(StyledTable, Object.assign({ "$compress": compress, "$columnCount": columns === null || columns === void 0 ? void 0 : columns.length, "$hasActionsColumn": actionsColumn, "$responsive": responsive }, props),
            showHeader && (columns === null || columns === void 0 ? void 0 : columns.length) !== 0 && columns.filter(h => h.length !== 0).length !== 0 && (React.createElement(StyledTableHead, null,
                columns.map(h => (React.createElement(StyledTableCell, { "$responsive": responsive },
                    React.createElement(Typography, { variant: "subtitle3" }, h)))),
                actionsColumn && !(responsive && compress) && (React.createElement(StyledTableCell, { "$responsive": responsive, "$action": true })))),
            React.createElement(StyledTableBody, null, React.Children.map(children, (c) => React.cloneElement(c, { responsive }))))));
};
const TableRow = ({ children = [], onClick, cellDefault, responsive = false }) => (React.createElement(StyledTableRow, { onClick: onClick, "$responsive": responsive }, React.Children.map(children, (value, index) => (
// eslint-disable-next-line react/no-array-index-key
React.createElement(StyledTableCell, { key: index, "$responsive": responsive }, value === null && cellDefault !== undefined ? cellDefault : value)))));
const TableRowAction = ({ children, onClick, icon }) => (React.createElement(PopperItem, { icon: icon, onClick: onClick }, children));
const TableRowActions = ({ children }) => {
    const anchorRef = React.useRef(null);
    const [open, setOpen] = React.useState(false);
    return (React.createElement(React.Fragment, null,
        React.createElement(IconButton, { disableRipple: true, disabled: React.Children.count(children) <= 0, ref: anchorRef, onClick: () => setOpen(true) },
            React.createElement(MoreVertIcon, null)),
        React.createElement(Popper, { open: open, anchorRef: anchorRef, onClickAway: () => setOpen(false), placement: "bottom-end" }, children)));
};
export { TableCell, Table, TableContainer, TableRow, TableRowAction, TableRowActions };
