import React, { forwardRef } from "react";
import ArrowUpward from "@material-ui/icons/ArrowUpward";
import ChevronLeft from "@material-ui/icons/ChevronLeft";
import ChevronRight from "@material-ui/icons/ChevronRight";
import Clear from "@material-ui/icons/Clear";
import FirstPage from "@material-ui/icons/FirstPage";
import LastPage from "@material-ui/icons/LastPage";
import Search from "@material-ui/icons/Search";
import MaterialTable from "material-table";
// n.b. this exists to bridge incompatibilities between the
// latest material-ui and material-table.
const icons = {
    DetailPanel: forwardRef((props, ref) => (React.createElement(ChevronRight, Object.assign({}, props, { ref: ref })))),
    FirstPage: forwardRef((props, ref) => (React.createElement(FirstPage, Object.assign({}, props, { ref: ref })))),
    LastPage: forwardRef((props, ref) => (React.createElement(LastPage, Object.assign({}, props, { ref: ref })))),
    NextPage: forwardRef((props, ref) => (React.createElement(ChevronRight, Object.assign({}, props, { ref: ref })))),
    PreviousPage: forwardRef((props, ref) => (React.createElement(ChevronLeft, Object.assign({}, props, { ref: ref })))),
    ResetSearch: forwardRef((props, ref) => (React.createElement(Clear, Object.assign({}, props, { ref: ref })))),
    Search: forwardRef((props, ref) => (React.createElement(Search, Object.assign({}, props, { ref: ref })))),
    SortArrow: forwardRef((props, ref) => (React.createElement(ArrowUpward, Object.assign({}, props, { ref: ref })))),
};
const flattenTreeData = (data, parentId) => {
    let nodes = [];
    Object.keys(data).forEach(key => {
        let nodeId = key;
        if (parentId) {
            nodeId = `${parentId}-${key}`;
        }
        let value = data[key];
        if (value instanceof Object) {
            nodes = nodes.concat(flattenTreeData(value, nodeId));
            value = "";
        }
        const node = { id: nodeId, name: key, value, parentId: "" };
        if (parentId) {
            node.parentId = parentId;
        }
        nodes.push(node);
    });
    return nodes;
};
const TreeTable = ({ title, data }) => {
    const treeData = flattenTreeData(data);
    return (React.createElement(MaterialTable, { title: title || "", icons: icons, style: { minWidth: "600px", width: "100%" }, options: {
            maxBodyHeight: "400px",
        }, data: treeData, columns: [
            { title: "Key", field: "name" },
            { title: "Value", field: "value" },
        ], parentChildData: (row, rows) => rows.find(a => a.id === row.parentId) }));
};
export default TreeTable;
