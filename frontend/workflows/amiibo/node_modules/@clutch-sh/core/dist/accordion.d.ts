import * as React from "react";
import type { AccordionProps as MuiAccordionProps } from "@material-ui/core";
export declare const StyledAccordionSummary: import("@emotion/styled").StyledComponent<{
    [x: string]: any;
    children: any;
    collapsible: any;
    expanded: any;
} & {
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType<any>;
}, {}, {}>;
export interface AccordionProps extends Pick<MuiAccordionProps, "defaultExpanded" | "expanded"> {
    title?: string;
    collapsible?: boolean;
    children: React.ReactNode;
    onClick?: React.MouseEventHandler;
}
export declare const Accordion: ({ title, collapsible, defaultExpanded, expanded: expandedProp, onClick: onClickProp, children, ...props }: AccordionProps) => JSX.Element;
export interface AccordionGroupProps {
    children?: React.ReactElement<AccordionProps> | React.ReactElement<AccordionProps>[];
    defaultExpandedIdx?: number;
}
export declare const AccordionGroup: ({ children, defaultExpandedIdx }: AccordionGroupProps) => JSX.Element;
export declare const AccordionActions: import("@emotion/styled").StyledComponent<import("@material-ui/core").AccordionActionsProps & {
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType<any>;
}, {}, {}>;
export declare const AccordionDetails: import("@emotion/styled").StyledComponent<import("@material-ui/core").AccordionDetailsProps & {
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType<any>;
}, {}, {}>;
export declare const AccordionDivider: import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").DividerTypeMap<{}, "hr">>;
