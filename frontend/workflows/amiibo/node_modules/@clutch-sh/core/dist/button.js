import * as React from "react";
import { Button as MuiButton, Grid, IconButton as MuiIconButton } from "@material-ui/core";
import CheckCircleOutlinedIcon from "@material-ui/icons/CheckCircleOutlined";
import FileCopyOutlinedIcon from "@material-ui/icons/FileCopyOutlined";
import { Tooltip } from "./Feedback/tooltip";
import styled from "./styled";
const COLORS = {
    neutral: {
        background: {
            primary: "transparent",
            hover: "#E7E7EA",
            active: "#CFD3D7",
            disabled: "#FFFFFF",
        },
        font: {
            primary: "#0D1030",
            disabled: "#0D1030",
        },
    },
    primary: {
        background: {
            primary: "#3548D4",
            hover: "#2D3DB4",
            active: "#2938A5",
            disabled: "#E7E7EA",
        },
        font: {
            primary: "#FFFFFF",
            disabled: "rgba(13, 16, 48, 0.38)",
        },
    },
    danger: {
        background: {
            primary: "#DB3615",
            hover: "#BA2E12",
            active: "#AB2A10",
            disabled: "#F1B3A6",
        },
        font: {
            primary: "#FFFFFF",
            disabled: "#FFFFFF",
        },
    },
    secondary: {
        background: {
            primary: "transparent",
            hover: "#F5F6FD",
            active: "#D7DAF6",
            disabled: "transparent",
        },
        font: {
            primary: "#3548D4",
            disabled: "#0D1030",
        },
    },
};
const colorCss = (palette) => {
    var _a, _b, _c;
    return {
        color: palette.font.primary,
        backgroundColor: palette.background.primary,
        "&:hover": {
            backgroundColor: palette.background.hover,
        },
        "&:active": {
            backgroundColor: palette.background.active,
        },
        "&:disabled": {
            color: ((_a = palette.font) === null || _a === void 0 ? void 0 : _a.disabled) ? (_b = palette.font) === null || _b === void 0 ? void 0 : _b.disabled : (_c = palette.font) === null || _c === void 0 ? void 0 : _c.primary,
            backgroundColor: palette.background.disabled,
            opacity: "0.38",
        },
    };
};
const StyledButton = styled(MuiButton)({
    borderRadius: "4px",
    fontWeight: 500,
    lineHeight: "20px",
    fontSize: "16px",
    textTransform: "none",
    height: "48px",
    padding: "14px 32px",
}, props => colorCss(props.palette));
const StyledBorderButton = styled(StyledButton)({
    border: "1px solid #0D1030",
    "&.Mui-disabled": {
        borderColor: "rgba(13, 16, 48, 0.1)",
    },
});
const ICON_BUTTON_STYLE_MAP = {
    small: {
        size: 32,
        padding: 4,
    },
    medium: {
        size: 48,
        padding: 12,
    },
    large: {
        size: 64,
        padding: 6,
    },
};
export const ICON_BUTTON_VARIANTS = Object.keys(ICON_BUTTON_STYLE_MAP);
/** A color palette from a @type ButtonPalette */
const variantPalette = (variant) => {
    const v = variant === "destructive" ? "danger" : variant;
    return (COLORS === null || COLORS === void 0 ? void 0 : COLORS[v]) || COLORS.primary;
};
/** A button with default themes based on use case. */
const Button = ({ text, variant = "primary", ...props }) => {
    const palette = variantPalette(variant);
    const ButtonVariant = variant === "neutral" ? StyledBorderButton : StyledButton;
    return (React.createElement(ButtonVariant, Object.assign({ variant: "contained", disableElevation: true, palette: palette }, props), text));
};
const StyledIconButton = styled(MuiIconButton)({}, props => {
    var _a, _b, _c;
    return ({
        width: `${((_a = ICON_BUTTON_STYLE_MAP[props.$size]) === null || _a === void 0 ? void 0 : _a.size) || ICON_BUTTON_STYLE_MAP.small.size}px`,
        height: `${((_b = ICON_BUTTON_STYLE_MAP[props.$size]) === null || _b === void 0 ? void 0 : _b.size) || ICON_BUTTON_STYLE_MAP.small.size}px`,
        padding: `${((_c = ICON_BUTTON_STYLE_MAP[props.$size]) === null || _c === void 0 ? void 0 : _c.padding) || ICON_BUTTON_STYLE_MAP.small.padding}px`,
        ...colorCss(props.$palette),
    });
});
/**
 * A button to wrap icons with default themes based on use case.
 * Will forwardRef so that tooltips can be wrapped around the buttons
 * @param variant valid color variant
 * @param size a valid size for the IconButton
 * @param children any children to render inside of the IconButton
 * @returns rendered IconButton component
 */
const IconButton = React.forwardRef(({ variant = "primary", size = "medium", children, ...props }, ref) => (React.createElement(StyledIconButton, Object.assign({ "$palette": variantPalette(variant), "$size": size }, props, { ref }), children)));
const ButtonGroupContainer = styled(Grid)({
    "> *": {
        margin: "12px 8px",
    },
}, props => props["data-border"] === "bottom"
    ? {
        marginBottom: "12px",
        borderBottom: "1px solid #E7E7EA",
        marginTop: "0",
    }
    : {
        marginTop: "12px",
        borderTop: "1px solid #E7E7EA",
        marginBottom: "0",
    });
/** A set of buttons to group together. */
const ButtonGroup = ({ children, justify = "flex-end", border = "top" }) => (React.createElement(ButtonGroupContainer, { container: true, justify: justify, "data-border": border }, children));
const StyledClipboardIconButton = styled(MuiIconButton)({
    color: "#000000",
    ":hover": {
        backgroundColor: "transparent",
    },
});
/**
 * A button to copy text to a users clipboard.
 *
 * When clicked a checkmark is briefly displayed.
 */
const ClipboardButton = ({ text, tooltip = "" }) => {
    const [clicked, setClicked] = React.useState(false);
    React.useEffect(() => {
        if (clicked) {
            const ticker = setTimeout(() => {
                setClicked(false);
            }, 1000);
            return () => clearTimeout(ticker);
        }
        return () => { };
    }, [clicked]);
    return (React.createElement(Tooltip, { title: tooltip },
        React.createElement(StyledClipboardIconButton, { onClick: () => {
                setClicked(true);
                navigator.clipboard.writeText(text);
            } }, clicked ? React.createElement(CheckCircleOutlinedIcon, null) : React.createElement(FileCopyOutlinedIcon, null))));
};
export { Button, ButtonGroup, ClipboardButton, IconButton };
