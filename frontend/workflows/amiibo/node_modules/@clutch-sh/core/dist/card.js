import * as React from "react";
import styled from "@emotion/styled";
import { Avatar, Card as MuiCard, CardActionArea, Divider, Grid, } from "@material-ui/core";
import KeyboardArrowDownIcon from "@material-ui/icons/KeyboardArrowDown";
import KeyboardArrowUpIcon from "@material-ui/icons/KeyboardArrowUp";
import { spacing } from "@material-ui/system";
import { IconButton } from "./button";
import { Typography } from "./typography";
// TODO: seperate out the different card parts into various files
const StyledCard = styled(MuiCard)({
    boxShadow: "0px 4px 6px rgba(53, 72, 212, 0.2)",
    border: "1px solid rgba(13, 16, 48, 0.1)",
});
const Card = ({ children, ...props }) => React.createElement(StyledCard, Object.assign({}, props), children);
const StyledCardHeaderContainer = styled.div({
    background: "#EBEDFB",
});
const StyledCardHeader = styled(Grid)({
    padding: "6px 8px",
    minHeight: "48px",
    ".MuiGrid-item": {
        padding: "0px 8px",
    },
});
const StyledCardHeaderAvatarContainer = styled.div({
    padding: "8px",
    height: "32px",
    width: "32px",
    alignSelf: "center",
    display: "flex",
});
// TODO: use material ui avatar component and implement figma design
const StyledCardHeaderAvatar = styled.div({
    width: "24px",
    height: "24px",
    fontSize: "18px",
    alignSelf: "center",
});
// TODO: make the divider a core component
const StyledDivider = styled(Divider)({
    color: "#A3A4B0",
    height: "24px",
    alignSelf: "center",
});
const StyledGridItem = styled(Grid)({
    textAlign: "center",
});
const CardHeader = ({ actions, avatar, children, title, summary = [] }) => (React.createElement(StyledCardHeaderContainer, null,
    React.createElement(StyledCardHeader, { container: true, wrap: "nowrap", alignItems: "center" },
        React.createElement(StyledCardHeaderAvatarContainer, null,
            React.createElement(StyledCardHeaderAvatar, null, avatar)),
        React.createElement(Grid, { container: true, wrap: "nowrap", alignItems: "center" },
            React.createElement(Grid, { item: true, xs: true },
                React.createElement(Typography, { variant: "h4" }, title)),
            summary.map((section, idx) => (
            // eslint-disable-next-line react/no-array-index-key
            React.createElement(React.Fragment, { key: idx },
                React.createElement(StyledDivider, { orientation: "vertical" }),
                React.createElement(StyledGridItem, { item: true, xs: true },
                    section.title,
                    section.subheader && (React.createElement(Typography, { variant: "body4", color: "rgba(13, 16, 48, 0.6)" }, section.subheader))))))),
        actions),
    children));
const BaseCardContent = styled.div `
  ${spacing}
`;
const StyledCardContentContainer = styled.div((props) => ({
    "> .MuiPaper-root": {
        border: "0",
        borderRadius: "0",
    },
    overflow: "hidden",
    maxHeight: props.maxHeight,
}));
const BaseCardActionArea = styled(CardActionArea) `
  ${spacing}
`;
const StyledCardActionArea = styled(BaseCardActionArea)({
    ":hover": {
        backgroundColor: "#F5F6FD",
    },
    ":active": {
        backgroundColor: "#D7DAF6",
    },
});
const StyledExpandButton = styled(IconButton)({
    width: "32px",
    height: "32px",
    color: "#3548D4",
    ":hover": {
        backgroundColor: "transparent",
    },
});
const CardContent = ({ children, collapsible = false, collapseAction = {
    open: { title: "See Less", icon: React.createElement(KeyboardArrowUpIcon, null) },
    closed: { title: "See More", icon: React.createElement(KeyboardArrowDownIcon, null) },
}, maxHeight = "none", ...props }) => {
    const ref = React.useRef(null);
    const [showExpand, setShowExpand] = React.useState(false);
    const [expanded, setExpanded] = React.useState(true);
    /**
     * Since the children rendered in the CardContent might be fetched through an API call, the hook adds the children prop as a dependency
     * so that the hook can be re-run when there are changes to the children prop value. Additionally, because the children prop value can
     * change dynamically (i.e. an API call is made to fetch more or less data for CardContent or an API call is made on an interval
     * to refresh the data for CardContent), the hook checks these evaluations in the following order:
     * 1. Is scollHeight less than maxHeight? If true, don't show the expand container and don't set a max height to the CardContent children
     * 2. Is showExpand and expand already true? If so, don't change their values.
     * 3. is scrollHeight greater than maxHeight? If true, show the expand container and set a max height to the CardContent children
     */
    React.useEffect(() => {
        if (ref.current.scrollHeight < maxHeight) {
            setShowExpand(false);
            setExpanded(true);
        }
        else if (showExpand && expanded) {
            setShowExpand(showExpand);
            setExpanded(expanded);
        }
        else if (ref.current.scrollHeight > maxHeight) {
            setShowExpand(true);
            setExpanded(false);
        }
    }, [maxHeight, children]);
    return (React.createElement(BaseCardContent, Object.assign({}, props),
        React.createElement(StyledCardContentContainer, { maxHeight: expanded ? "none" : maxHeight, ref: ref }, children),
        collapsible && showExpand && (React.createElement(StyledCardActionArea, { padding: 0, onClick: () => setExpanded(!expanded) },
            React.createElement(Grid, { container: true, alignItems: "center", justify: "center" },
                React.createElement(Grid, { item: true },
                    React.createElement(Typography, { variant: "body4", color: "#3548D4" }, expanded ? collapseAction === null || collapseAction === void 0 ? void 0 : collapseAction.open.title : collapseAction === null || collapseAction === void 0 ? void 0 : collapseAction.closed.title)),
                React.createElement(Grid, { item: true },
                    React.createElement(StyledExpandButton, { variant: "neutral" }, expanded ? collapseAction === null || collapseAction === void 0 ? void 0 : collapseAction.open.icon : collapseAction === null || collapseAction === void 0 ? void 0 : collapseAction.closed.icon)))))));
};
const StyledLandingCard = styled(Card)({
    border: "none",
    "& .header": {
        display: "inline-flex",
        marginBottom: "16px",
        fontWeight: "bold",
        fontSize: "12px",
        lineHeight: "36px",
        color: "rgba(13, 16, 48, 0.6)",
    },
    "& .header .icon .MuiAvatar-root": {
        height: "36px",
        width: "36px",
        marginRight: "8px",
        color: "rgba(13, 16, 48, 0.38)",
        backgroundColor: "rgba(13, 16, 48, 0.12)",
    },
});
export const LandingCard = ({ group, title, description, onClick, ...props }) => (React.createElement(StyledLandingCard, Object.assign({}, props),
    React.createElement(StyledCardActionArea, { onClick: onClick },
        React.createElement(CardContent, { padding: 4 },
            React.createElement("div", { className: "header" },
                React.createElement("div", { className: "icon" },
                    React.createElement(Avatar, null, group.charAt(0))),
                React.createElement("span", null, group)),
            React.createElement("div", null,
                React.createElement(Typography, { variant: "h3" }, title),
                React.createElement(Typography, { color: "rgba(13, 16, 48, 0.6)", variant: "body2" }, description))))));
export { Card, CardContent, CardHeader };
