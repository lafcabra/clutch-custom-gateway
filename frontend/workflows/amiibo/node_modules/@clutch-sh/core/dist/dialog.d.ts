import * as React from "react";
import type { DialogProps as MuiDialogProps } from "@material-ui/core";
declare const DialogContent: import("@emotion/styled").StyledComponent<import("@material-ui/core").DialogContentProps & {
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType<any>;
}, {}, {}>;
declare const DialogActions: import("@emotion/styled").StyledComponent<import("@material-ui/core").DialogActionsProps & {
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType<any>;
}, {}, {}>;
export interface DialogContentProps {
}
export interface DialogActionsProps {
}
export declare type DialogCloseReasons = "closeButtonClick" | "escapeKeyDown" | "backdropClick";
export interface DialogProps extends Pick<MuiDialogProps, "open"> {
    title: string;
    children: React.ReactElement<DialogContentProps> | React.ReactElement<DialogContentProps>[] | React.ReactElement<DialogActionsProps> | React.ReactElement<DialogActionsProps>[];
    onClose: (event?: object, reason?: DialogCloseReasons) => void;
}
declare const Dialog: ({ title, children, open, onClose }: DialogProps) => JSX.Element;
export { Dialog, DialogActions, DialogContent };
