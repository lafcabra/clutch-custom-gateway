import * as React from "react";
import styled from "@emotion/styled";
import { Tab as MuiTab } from "@material-ui/core";
import { TabContext, TabList, TabPanel as MuiTabPanel } from "@material-ui/lab";
const StyledTab = styled(MuiTab)({
    minWidth: "111px",
    height: "46px",
    padding: "12px 32px",
    color: "rgba(13, 16, 48, 0.6)",
    borderBottom: "3px solid #E7E7EA",
    fontSize: "14px",
    fontWeight: "bold",
    opacity: "1",
    textTransform: "none",
    "&.Mui-selected": {
        backgroundColor: "unset",
        color: "#3548D4",
        border: "0",
    },
    "&:hover": {
        color: "rgba(13, 16, 48, 0.6)",
        backgroundColor: "#E7E7EA",
        outline: "none",
    },
    "&:focus": {
        color: "#3548D4",
        backgroundColor: "#EBEDFB",
    },
    "&:focus-within": {
        color: "#3548D4",
        backgroundColor: "#EBEDFB",
    },
    "&:active": {
        color: "rgba(13, 16, 48, 0.6)",
        backgroundColor: "#DBDBE0",
    },
    ".MuiTab-wrapper": {
        margin: "auto",
    },
});
const StyledTabs = styled(TabList)({
    ".MuiTabs-indicator": {
        height: "4px",
        backgroundColor: "#3548D4",
    },
});
export const Tab = ({ onClick, label, startAdornment, ...props }) => {
    const tabProps = { ...props };
    delete tabProps.children;
    const onClickMiddleware = (e) => {
        e.currentTarget.blur();
        if (onClick) {
            onClick(e);
        }
    };
    let finalLabel = label;
    if (startAdornment !== undefined) {
        finalLabel = (React.createElement("div", { style: { display: "flex" } },
            React.createElement("span", { style: { marginRight: "7px" } }, startAdornment),
            label));
    }
    return React.createElement(StyledTab, Object.assign({ color: "primary", onClick: onClickMiddleware, label: finalLabel }, tabProps));
};
const TabPanel = styled(MuiTabPanel)({
    padding: "0",
    maxWidth: "100%",
});
export const Tabs = ({ children, value, variant, onChange, ...props }) => {
    const [selectedIndex, setSelectedIndex] = React.useState((value || 0).toString());
    const onChangeMiddleware = (_, v) => {
        setSelectedIndex(v);
        if (onChange) {
            onChange(v);
        }
    };
    return (React.createElement("div", { style: { width: "100%" } },
        React.createElement(TabContext, { value: selectedIndex },
            React.createElement(StyledTabs, Object.assign({ variant: variant, onChange: onChangeMiddleware }, props), React.Children.map(children, (child, index) => React.cloneElement(child, { value: index.toString() }))),
            React.Children.map(children, (tab, index) => {
                var _a;
                return (React.createElement(TabPanel, { value: index.toString() }, (_a = tab.props) === null || _a === void 0 ? void 0 : _a.children));
            }))));
};
