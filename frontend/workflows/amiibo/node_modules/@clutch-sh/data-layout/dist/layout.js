import React from "react";
import _ from "lodash";
import { useManagerContext } from "./context";
const updateData = (manager, layoutKey, key, value) => {
    const { data } = manager.state[layoutKey];
    _.set(data, key, value);
    manager.update(layoutKey, { data });
};
/**
 * Use a registered data layout.
 *
 * If a hydrate function has been specified this and the layout's data has not been set and hydrate is true this will
 * populate it's data on the first invocation. If the layout has a cache key set to true and also has existing data OR
 * hydrate is false, hydrate will not be invoked.

 * @param key The name of the layout registered with the manager.
 * @param opts An options object to allow for things like disabling hydration by default
 */
const useDataLayout = (key, opts) => {
    const manager = useManagerContext();
    const options = { hydrate: true, ...opts };
    if (!Object.keys(manager.state).includes(key)) {
        throw new Error(`Non-existant data layout key: ${key}`);
    }
    // n.b. reset error and loading state on load.
    // This prevents previous errors from rendering until hydration is finished.
    React.useEffect(() => {
        manager.update(key, { error: undefined, isLoading: false });
    }, []);
    React.useEffect(() => {
        if (options.hydrate && !(manager.state[key].cache && !_.isEmpty(manager.state[key].data))) {
            manager.hydrate(key);
        }
    }, [key]);
    return {
        assign: data => data !== manager.state[key].data && manager.assign(key, data),
        updateData: (dataKey, value) => updateData(manager, key, dataKey, value),
        hydrate: () => manager.hydrate(key),
        value: manager.state[key].data,
        displayValue: () => { var _a; return ((_a = manager.state[key].data) === null || _a === void 0 ? void 0 : _a.toJSON) ? manager.state[key].data.toJSON() : manager.state[key].data; },
        isLoading: manager.state[key].isLoading,
        error: manager.state[key].error,
    };
};
export default useDataLayout;
