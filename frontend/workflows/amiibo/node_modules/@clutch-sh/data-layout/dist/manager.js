import _ from "lodash";
import { ManagerAction, useManagerState } from "./state";
const assign = (key, value) => {
    return dispatch => {
        dispatch({
            type: ManagerAction.SET,
            payload: { key, value },
        });
    };
};
const reset = () => {
    return dispatch => {
        dispatch({
            type: ManagerAction.RESET,
        });
    };
};
const update = (key, value) => {
    return dispatch => {
        dispatch({
            type: ManagerAction.UPDATE,
            payload: { key, value },
        });
    };
};
const hydrate = (key) => {
    return (dispatch, getState) => {
        const state = getState();
        if (Object.keys(state[key]).includes("hydrator")) {
            dispatch({
                type: ManagerAction.HYDRATE_START,
                payload: { key },
            });
            const args = state[key].deps.map(dep => state[dep].data);
            if (args.some(element => _.isEmpty(element))) {
                dispatch({
                    type: ManagerAction.HYDRATE_END,
                    payload: {
                        key,
                        error: {
                            message: `Missing dependency for data layout: '${key}'`,
                            status: {
                                code: 404,
                                text: "Not Found",
                            },
                        },
                    },
                });
                return;
            }
            return state[key]
                .hydrator(...args)
                .then(result => {
                dispatch({
                    type: ManagerAction.HYDRATE_END,
                    payload: {
                        key,
                        result: state[key].transformResponse(result),
                    },
                });
            })
                .catch(error => {
                dispatch({
                    type: ManagerAction.HYDRATE_END,
                    payload: {
                        key,
                        error: state[key].transformError(error),
                    },
                });
            });
        }
    };
};
const defaultTransform = (data) => data;
const defaultErrorTransform = (err) => err;
const initialLayoutStepState = () => ({ data: {}, isLoading: true, error: null });
const defaultState = (layouts) => {
    const initializedLayouts = {};
    Object.keys(layouts).forEach(key => {
        var _a;
        const layout = layouts[key];
        initializedLayouts[key] = initialLayoutStepState();
        if ((layout === null || layout === void 0 ? void 0 : layout.hydrator) !== undefined) {
            initializedLayouts[key] = {
                ...initializedLayouts[key],
                hydrator: (layout === null || layout === void 0 ? void 0 : layout.hydrator) || (() => { }),
                transformResponse: layout.transformResponse || defaultTransform,
                transformError: layout.transformError || defaultErrorTransform,
                deps: (layout === null || layout === void 0 ? void 0 : layout.deps) || [],
                cache: (_a = layout.cache) !== null && _a !== void 0 ? _a : false,
            };
        }
    });
    return initializedLayouts;
};
const useDataLayoutManager = (layouts) => {
    const initialState = defaultState(layouts);
    const [state, dispatch] = useManagerState(initialState);
    return {
        state,
        assign: (key, value) => dispatch(assign(key, value)),
        hydrate: key => dispatch(hydrate(key)),
        update: (key, value) => dispatch(update(key, value)),
        reset: () => dispatch(reset()),
    };
};
export default useDataLayoutManager;
