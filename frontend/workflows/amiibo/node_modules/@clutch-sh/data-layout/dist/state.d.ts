import type React from "react";
import type { Thunk } from "react-hook-thunk-reducer";
import type { ClutchError } from "@clutch-sh/core";
declare enum ManagerAction {
    HYDRATE_START = 0,
    HYDRATE_END = 1,
    SET = 2,
    UPDATE = 3,
    RESET = 4
}
export interface ManagerLayout {
    [key: string]: {
        isLoading?: boolean;
        data?: object;
        error?: ClutchError;
        hydrator?: (...args: any[]) => any;
        transformResponse?: (...args: any[]) => any;
        transformError?: (...args: any[]) => ClutchError;
        deps?: string[];
        cache?: boolean;
    };
}
interface ActionPayload {
    key?: string;
    value?: object;
    result?: object;
    error?: ClutchError;
}
export interface Action {
    type: ManagerAction;
    payload?: ActionPayload;
}
declare const reducer: (state: ManagerLayout, action: Action) => ManagerLayout;
declare const useManagerState: (initialState: ManagerLayout) => [ManagerLayout, React.Dispatch<Action | Thunk<ManagerLayout, Action>>];
export { ManagerAction, reducer, useManagerState };
