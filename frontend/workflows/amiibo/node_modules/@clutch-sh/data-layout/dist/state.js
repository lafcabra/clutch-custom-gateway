import useThunkReducer from "react-hook-thunk-reducer";
var ManagerAction;
(function (ManagerAction) {
    ManagerAction[ManagerAction["HYDRATE_START"] = 0] = "HYDRATE_START";
    ManagerAction[ManagerAction["HYDRATE_END"] = 1] = "HYDRATE_END";
    ManagerAction[ManagerAction["SET"] = 2] = "SET";
    ManagerAction[ManagerAction["UPDATE"] = 3] = "UPDATE";
    ManagerAction[ManagerAction["RESET"] = 4] = "RESET";
})(ManagerAction || (ManagerAction = {}));
const reducer = (state, action) => {
    var _a, _b, _c, _d, _e, _f;
    const layoutKey = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.key;
    const stateClone = { ...state };
    switch (action.type) {
        case ManagerAction.HYDRATE_START:
            return {
                ...state,
                [layoutKey]: { ...state[layoutKey], isLoading: true },
            };
        case ManagerAction.HYDRATE_END: {
            const newData = (_b = action.payload) === null || _b === void 0 ? void 0 : _b.result;
            const existingData = (_c = state[layoutKey]) === null || _c === void 0 ? void 0 : _c.data;
            const newDataIsArray = Array.isArray(newData);
            const existingDataIsArray = Array.isArray(existingData);
            let data;
            if ((newDataIsArray && !existingDataIsArray) || (!newDataIsArray && existingDataIsArray)) {
                data = newData;
            }
            else if (newDataIsArray) {
                data = [...existingData, ...newData];
            }
            else {
                data = { ...existingData, ...newData };
            }
            const update = {
                isLoading: false,
                data,
                error: (_d = action.payload) === null || _d === void 0 ? void 0 : _d.error,
            };
            return {
                ...state,
                [layoutKey]: { ...state[layoutKey], ...update },
            };
        }
        case ManagerAction.SET:
            return {
                ...state,
                [layoutKey]: {
                    ...state === null || state === void 0 ? void 0 : state[layoutKey],
                    data: (_e = action.payload) === null || _e === void 0 ? void 0 : _e.value,
                    isLoading: false,
                },
            };
        case ManagerAction.UPDATE:
            return {
                ...state,
                [layoutKey]: {
                    isLoading: false,
                    ...state[layoutKey],
                    ...(_f = action.payload) === null || _f === void 0 ? void 0 : _f.value,
                },
            };
        case ManagerAction.RESET:
            Object.keys(state).forEach(key => {
                stateClone[key] = {
                    ...state[key],
                    data: {},
                    isLoading: true,
                    error: null,
                };
            });
            return stateClone;
        default:
            throw new Error(`Unknown data manager action: ${action.type}`);
    }
};
const useManagerState = (initialState) => {
    return useThunkReducer(reducer, initialState);
};
export { ManagerAction, reducer, useManagerState };
